{"version":3,"sources":["Component/LifeCycle/LifeCycle.jsx","App.js","reportWebVitals.js","index.js"],"names":["LifeCycle","fetchGithubUser","url","state","username","console","log","setState","loading","axios","get","then","response","user","data","catch","error","onInputChange","event","target","value","this","className","Card","style","width","Img","variant","src","avatar_url","Body","Title","name","Text","public_repos","followers","type","onChange","onClick","showUser","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAiGeA,E,kDAzFX,aAAe,IAAD,8BACV,gBAUJC,gBAAkB,WACd,IAAMC,EAAM,gCAAkC,EAAKC,MAAMC,SAEzDC,QAAQC,IAAIJ,GAEZ,EAAKK,SAAS,CACVC,SAAS,IAEbC,IAAMC,IAAIR,GACLS,MAAK,SAACC,GACH,EAAKL,SAAS,CACVC,SAAS,EACTK,KAAMD,EAASE,UAGtBC,OAAM,SAACC,GACJX,QAAQC,IAAIU,OA3BV,EA+BdC,cAAgB,SAACC,GACb,IAAMd,EAAWc,EAAMC,OAAOC,MAE9B,EAAKb,SAAS,CACVH,cAhCJ,EAAKD,MAAQ,CACTC,SAAU,GACVS,KAAM,KACNL,SAAS,GANH,E,uDA2CV,OAAwB,OAApBa,KAAKlB,MAAMU,KACJ,mBAAGS,UAAU,UAAb,yCAEgB,IAAvBD,KAAKlB,MAAMK,QACJ,mBAAGc,UAAU,UAAb,wBAIH,qBAAKA,UAAU,WAAf,SAUI,eAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,SAAtB,UACI,cAACF,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAKP,KAAKlB,MAAMU,KAAKgB,WAAYP,UAAU,aACnE,eAACC,EAAA,EAAKO,KAAN,CAAWR,UAAU,YAArB,UACI,cAACC,EAAA,EAAKQ,MAAN,UAAaV,KAAKlB,MAAMU,KAAKmB,OAC7B,eAACT,EAAA,EAAKU,KAAN,4BAA0BZ,KAAKlB,MAAMU,KAAKqB,gBAC1C,eAACX,EAAA,EAAKU,KAAN,yBAAuBZ,KAAKlB,MAAMU,KAAKsB,uB,+BAW3D,OACI,sBAAKb,UAAU,YAAf,UAEI,uBAAOc,KAAK,OAAOC,SAAUhB,KAAKJ,cAAeK,UAAU,eAC3D,wBAAQgB,QAASjB,KAAKpB,gBAAtB,sBAECoB,KAAKkB,kB,GArFEC,a,MCMTC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.273009e0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './LifeCycle.css';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\n\r\nclass LifeCycle extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            username: '',\r\n            user: null,\r\n            loading: false\r\n        }\r\n\r\n    }\r\n\r\n    fetchGithubUser = () => {\r\n        const url = 'https://api.github.com/users/' + this.state.username;\r\n        \r\n        console.log(url);\r\n\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        axios.get(url)\r\n            .then((response) => {\r\n                this.setState({\r\n                    loading: false,\r\n                    user: response.data\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    onInputChange = (event) => {\r\n        const username = event.target.value;\r\n\r\n        this.setState({\r\n            username\r\n        });\r\n    };\r\n\r\n    showUser() {\r\n        // if (this.state.loading === true) {\r\n        //     return <p className=\"heading\">Loading...</p>;\r\n        // }\r\n        if (this.state.user === null) {\r\n            return <p className=\"heading\">Type your Github user name</p>;\r\n        }\r\n        if (this.state.loading === true) {\r\n            return <p className=\"heading\">Loading...</p>;\r\n        }\r\n        else {\r\n            return (\r\n                <div className=\"Card-div\">\r\n                    {/* <img src={this.state.user.avatar_url} />\r\n                    <h2>Login Name: {this.state.user.name} </h2>\r\n                    <h2>Repositories: {this.state.user.public_repos} </h2> */}\r\n                    {/* <h2><a href={this.state.user.repos_url}>Repositories: </a></h2> */}\r\n                    {/* <h2>Followers: {this.state.user.followers} </h2> */}\r\n                    {/* <h2>URL:<a href={this.state.user.html_url}></a> </h2> */}\r\n                   \r\n                   \r\n                   \r\n                    <Card style={{ width: '18rem' }}>\r\n                        <Card.Img variant=\"top\" src={this.state.user.avatar_url} className=\"Card-img\" />\r\n                        <Card.Body className=\"Card-body\">\r\n                            <Card.Title>{this.state.user.name}</Card.Title>\r\n                            <Card.Text>Repositories: {this.state.user.public_repos}</Card.Text>\r\n                            <Card.Text>Followers: {this.state.user.followers}</Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </div>\r\n\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // console.log('render')\r\n        return (\r\n            <div className=\"container\">\r\n                \r\n                <input type=\"text\" onChange={this.onInputChange} className=\"Card-input\" />\r\n                <button onClick={this.fetchGithubUser}>Get User</button>\r\n\r\n                {this.showUser()} \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LifeCycle;","import React from 'react';\nimport LifeCycle from './Component/LifeCycle/LifeCycle';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div >\n      <LifeCycle />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}